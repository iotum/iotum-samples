{"version":3,"file":"static/js/528.bdcd2101.chunk.js","mappings":"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","sources":["components/ChatRoom/ChatRoom.js","webpack://iotum-samples/./src/navigation/MenuButton/MenuButton.module.css?3f77","navigation/MenuButton/MenuButton.js","pages/chat-room-list/ChatRoomList.js","webpack://iotum-samples/./src/pages/chat-room-list/submitForm.module.css?5027","pages/chat-room-list/App.js","webpack://iotum-samples/./src/components/ChatRoom/chat.module.css?03db"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport * as Callbridge from '@iotum/callbridge-js';\nimport styles from './chat.module.css';\n\nconst ChatRoom = (props) => {\n  const chatContainerRef = useRef(null);\n  const credentials = useSelector(state => state.credentials)\n\n  useEffect(() => {\n    // Use the domain from the Redux store, or a default value if not available\n    const domain = credentials.domain || 'iotum.callbridge.rocks'\n\n    // This code will run after the component has rendered and the chat container is available in the DOM\n    const chatRoom = new Callbridge.Dashboard(\n      {\n        domain: domain,\n        container: chatContainerRef.current, // Use the DOM element reference\n      },\n      Callbridge.Service.Team,\n      {\n        layout: Callbridge.LayoutOption.main,\n        pathname: props.path\n      }\n    );\n\n    console.log(\"A new chat room was opened: \" + props.path);\n\n    // Cleanup function to be called when the component unmounts\n    return () => {\n      chatRoom.unload(); // Replace with actual cleanup method if available\n      console.log(\"Chat room was closed: \" + props.path);\n    };\n  }, [props.path, credentials]);\n\n  // Render the chat container reference\n  return <div ref={chatContainerRef} className={styles.chatRoom}></div>;\n};\n\nexport default ChatRoom;\n","// extracted by mini-css-extract-plugin\nexport default {\"menuButton\":\"MenuButton_menuButton__e9oFw\",\"left\":\"MenuButton_left__d8Tih\",\"right\":\"MenuButton_right__fbjxn\"};","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styles from './MenuButton.module.css'; \r\n\r\nfunction MenuButton({ position = 'left' }) { // 'left' is default if no position is provided\r\n  const navigate = useNavigate();\r\n  \r\n  const handleClick = () => {\r\n    console.log('Menu Button Clicked, Go To the Menu Page.');\r\n    navigate('/iotum-samples/menu');\r\n  };\r\n\r\n  // Determine the button position class\r\n  const positionClass = position === 'right' ? styles.right : styles.left;\r\n\r\n  return (\r\n    <div>\r\n      <button className={`${styles.menuButton} ${positionClass}`} onClick={handleClick}>\r\n        Menu Page\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MenuButton;\r\n","import React from 'react';\nimport ChatRoom from '../../components/ChatRoom/ChatRoom.js';\nimport styles from '../../components/ChatRoom/chat.module.css';\nimport TokenButton from '../../navigation/TokenButton/TokenButton';\nimport MenuButton from '../../navigation/MenuButton/MenuButton';\n\nconst ChatRoomList = ({ rooms, onRoomClose }) => {\n  return (\n      <div className={styles.chatRoomsContainer}>\n        {rooms.map((room) =>\n          room.bool && (\n            <div key={room.path} className={`${styles.chatRoom} ${styles.activeRoom}`}>\n              <ChatRoom path={room.path} />\n              <button\n                className={styles.closeButton}\n                onClick={() => onRoomClose(room.path)}\n              >\n                x\n              </button>\n            </div>\n          )\n        )}\n        <TokenButton position='right'/>\n        <MenuButton position=\"right\"/>\n      </div>\n  );\n};\n\nexport default ChatRoomList;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"submitForm_container__iv0mm\",\"roomListContainer\":\"submitForm_roomListContainer__8I4zt\"};","import React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport ChatRoomList from './ChatRoomList';\nimport styles from './submitForm.module.css';\nimport * as Callbridge from '@iotum/callbridge-js';\nimport useGuardedRoute from '../../components/hooks/useGuardedRoute';\n\nconst App = () => {\n  useGuardedRoute()\n  const [allRooms, setAllRooms] = useState([]);\n\n  // Retrive credentials from Redux store\n  const credentials = useSelector(state => state.credentials);\n\n  const handleRoomButtonClick = (path) => {\n    setAllRooms(prevRooms => prevRooms.map(room => {\n      return room.path === path ? { ...room, bool: true } : room;\n    }));\n  };\n\n  const handleRoomClose = (path) => {\n    console.log(path + \" was closed\");\n    setAllRooms(prevRooms => prevRooms.map(room => {\n      return room.path === path ? { ...room, bool: false } : room;\n    }));\n  };\n\n  const renderWidget = useCallback(({ domain, token, hostId }) => {\n    console.log(\"renderWidget ran\");\n    const _widget = new Callbridge.Dashboard(\n      {\n        domain,\n        sso: {\n          token,\n          hostId\n        },\n        container: '#chat',\n      },\n      Callbridge.Service.Team,\n      {\n        layout: Callbridge.LayoutOption.list,\n        pathname: '/'\n      }\n    );\n\n    _widget.once('dashboard.ROOM_LIST', (data) => {\n      const uniqueAccountNames = []; // To keep track of account names that should have \"(you)\" added\n      const allRoomsChange = Object.values(data.rooms).map((room) => {\n        const accounts = room.accounts.map((account) => account.name);\n\n        // Check if the room has only one account\n        if (accounts.length === 1) {\n          const accountName = `${accounts[0]} (you)`;\n          uniqueAccountNames.push(accounts[0]); // Add the account name to the unique list\n          return {\n            name: accountName,\n            path: room.path,\n            bool: false,\n          };\n        }\n\n        // Filter out account names that are in the unique list\n        const filteredNames = accounts.filter((name) => !uniqueAccountNames.includes(name));\n        return {\n          name: filteredNames.join(', '),\n          path: room.path,\n          bool: false,\n        };\n      });\n\n      setAllRooms(allRoomsChange);\n    });\n\n    _widget.on('dashboard.NAVIGATE', (data) => {\n      if (data.pathname !== \"/\") {\n        _widget.load(\"Team\", { layout: \"list\" })\n        console.log(\"There was a navigate event to \" + data.pathname + \" in the list widget and the list widget was reloaded\");\n      }\n\n      handleRoomButtonClick(data.pathname);\n    });\n\n    _widget.on('dashboard.READY', () => {\n      console.log(\"The list widget was rendered\");\n    });\n\n    return _widget;\n  }, []);\n\n  useEffect(() => {\n    if (credentials && credentials.token && credentials.domain && credentials.hostId) {\n      const widget = renderWidget(credentials);\n      return () => {\n        widget.unload();\n      }\n    }\n  }, [credentials, renderWidget]);\n\n  return (\n    <div className={styles.container}>\n      <div id=\"chat\" className={styles.roomListContainer}></div>\n      <div>\n        <ChatRoomList rooms={allRooms} onRoomClose={handleRoomClose} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"chat_container__tPqzb\",\"roomListContainer\":\"chat_roomListContainer__hpRp3\",\"chatRoomItem\":\"chat_chatRoomItem__tdDrk\",\"active\":\"chat_active__YaH2-\",\"chatRoomsContainer\":\"chat_chatRoomsContainer__Smrg+\",\"chatRoom\":\"chat_chatRoom__Oon7U\",\"activeRoom\":\"chat_activeRoom__fmDik\",\"closeButton\":\"chat_closeButton__v7qtp\"};"],"names":["props","chatContainerRef","useRef","credentials","useSelector","state","useEffect","domain","chatRoom","Callbridge","container","current","Team","layout","main","pathname","path","console","log","unload","_jsx","ref","className","styles","_ref","_ref$position","position","navigate","useNavigate","positionClass","children","concat","onClick","rooms","onRoomClose","_jsxs","chatRoomsContainer","map","room","bool","activeRoom","ChatRoom","closeButton","TokenButton","MenuButton","useGuardedRoute","_useState","useState","_useState2","_slicedToArray","allRooms","setAllRooms","renderWidget","useCallback","token","hostId","_widget","sso","list","once","data","uniqueAccountNames","allRoomsChange","Object","values","accounts","account","name","length","accountName","push","filter","includes","join","on","load","prevRooms","_objectSpread","widget","id","ChatRoomList"],"sourceRoot":""}