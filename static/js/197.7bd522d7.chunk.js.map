{"version":3,"file":"static/js/197.7bd522d7.chunk.js","mappings":"yKACA,EAA6B,+BAA7B,EAAmE,yBAAnE,EAAoG,0B,SCuBpG,MApBA,SAAmBA,GAAyB,IAADC,EAAAD,EAArBE,SAAAA,OAAQ,IAAAD,EAAG,OAAMA,EAC/BE,GAAWC,EAAAA,EAAAA,MAQXC,EAA6B,UAAbH,EAAuBI,EAAeA,EAE5D,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,UAAQE,UAAS,GAAAC,OAAKJ,EAAiB,KAAAI,OAAIL,GAAiBM,QAV5C,WAClBC,QAAQC,IAAI,6CACZV,EAAS,sBACX,EAOqFK,SAAC,eAKxF,C,4FCrBA,EAA+B,iCAA/B,EAAuF,yCAAvF,EAAkJ,oCAAlJ,EAA8L,0B,2DCOxLM,GAAUC,EAAAA,EAAAA,aAAW,SAACC,EAAOC,GAAG,OACpCV,EAAAA,EAAAA,KAAA,OAAKU,IAAKA,EAAKR,UAAWH,GAA8B,IAmJ1D,EAhJY,YACVY,EAAAA,EAAAA,KACA,IAAAC,GAAgDC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvDI,EAAgBF,EAAA,GAAEG,EAAmBH,EAAA,GAC5CI,GAA4CL,EAAAA,EAAAA,UAAS,GAAEM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAAoDT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA5DE,EAAmBD,EAAA,GAAEE,EAAoBF,EAAA,GAChDG,GAA8Cb,EAAAA,EAAAA,WAAS,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAtDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAGpCG,GAAeC,EAAAA,EAAAA,UAEfC,GAAgBD,EAAAA,EAAAA,UAEhBE,GAAYF,EAAAA,EAAAA,UAEZG,GAAcC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,WAAW,IAEpDG,GAAeC,EAAAA,EAAAA,cAAY,SAACC,EAAS9C,GAAiC,IAA7B+C,EAAM/C,EAAN+C,OAAQC,EAAKhD,EAALgD,MAAOC,EAAMjD,EAANiD,OAC5DrC,QAAQC,IAAI,kBAEZ2B,EAAUU,QAAU,IAAIC,EAAAA,UAAqB,CAC3CJ,OAAAA,EACAK,IAAK,CACHJ,MAAAA,EACAC,OAAAA,GAEFH,UAAAA,IAGFN,EAAUU,QAAQG,QAAO,GAEzBb,EAAUU,QAAQI,GAAG,mBAAmB,WACtCf,EAAcW,QAAU,IAAIC,EAAAA,UAAqB,CAC/CJ,OAAAA,EACAD,UAAAA,GACCK,EAAAA,QAAmBI,MAEtBhB,EAAcW,QAAQG,QAAO,GAE7Bd,EAAcW,QAAQI,GAAG,6BAA6B,SAACE,GACrD,IAAMC,EAAcC,OAAOC,OAAOH,EAAKI,OAAOC,QAAO,SAACC,EAAOC,GAAK,OAAKD,EAAQC,CAAK,GAAE,GACtFnC,EAAkB6B,EACpB,IAEAlB,EAAcW,QAAQI,GAAG,mBAAmB,WAC1ClB,GAAmB,GACnBJ,GAAqB,EACvB,GACF,GACF,GAAG,KAEHgC,EAAAA,EAAAA,YAAU,WAGR,GAD4BvB,EAAYO,OAASP,EAAYM,QAAUN,EAAYQ,QACxDZ,EAAaa,QAGtC,OAFAN,EAAaP,EAAaa,QAAST,GAE5B,WAAO,IAADwB,EAAAC,EACM,QAAjBD,EAAAzB,EAAUU,eAAO,IAAAe,GAAjBA,EAAmBE,SACE,QAArBD,EAAA3B,EAAcW,eAAO,IAAAgB,GAArBA,EAAuBC,SACvBvD,QAAQC,IAAI,kBACd,CAEJ,GAAG,CAAC4B,EAAaG,KAEjBoB,EAAAA,EAAAA,YAAU,WACJjC,GACFQ,EAAcW,QAAQI,GAAG,sBAAsB,SAACE,GAC9C,IAAMY,EAAyB,MAAlBZ,EAAKa,SAAmBb,EAAKa,SAAW,sBACrDzD,QAAQC,IAAI,2CAADH,OAA4C0D,GACzD,GAEJ,GAAG,CAACrC,IAKJ,IAAMuC,EAAa,SAACC,GAAa,IAADC,EAAAC,EACb,QAAjBD,EAAAhC,EAAUU,eAAO,IAAAsB,GAAjBA,EAAmBnB,QAAO,GACL,QAArBoB,EAAAlC,EAAcW,eAAO,IAAAuB,GAArBA,EAAuBpB,QAAO,GAE1BkB,IAAYpB,EAAAA,QAAmBuB,MACjClD,GAAoB,GACpBZ,QAAQC,IAAI,kBACH0D,IAAYpB,EAAAA,QAAmBI,MACxChB,EAAcW,QAAQG,QAAO,GAC7B7B,GAAoB,GACpBZ,QAAQC,IAAI,+BAEZ2B,EAAUU,QAAQG,QAAO,GACzBb,EAAUU,QAAQyB,KAAKJ,GACvB/C,GAAoB,GACpBZ,QAAQC,IAAI,YAADH,OAAa6D,EAAO,YAEnC,EAEA,OACEK,EAAAA,EAAAA,MAAA,OAAKnE,UAAWH,EAAoBE,SAAA,EAClCoE,EAAAA,EAAAA,MAAA,OAAKnE,UAAWH,EAA4BE,SAAA,EAC1CD,EAAAA,EAAAA,KAAA,UAAQsE,KAAK,SACXlE,QAAS,kBAAM2D,EAAWnB,EAAAA,QAAmBuB,KAAK,EAClDI,UAAW3C,EAAgB3B,SAC5B,cAGDoE,EAAAA,EAAAA,MAAA,UACEC,KAAK,SACLlE,QAAS,kBAAM2D,EAAW,OAAO,EACjCQ,UAAW3C,EACX4C,MAAO,CAAE7E,SAAU,YAAaM,SAAA,CACjC,YAEEmB,EAAiB,IAAKpB,EAAAA,EAAAA,KAAA,QAAME,UAAWH,EAAaE,SAAEmB,QAEzDpB,EAAAA,EAAAA,KAAA,UACEsE,KAAK,SACLlE,QAAS,kBAAM2D,EAAWnB,EAAAA,QAAmB6B,MAAM,EACnDF,UAAW3C,EAAgB3B,SAC5B,WAGDD,EAAAA,EAAAA,KAAA,UACEsE,KAAK,SACLlE,QAAS,kBAAM2D,EAAWnB,EAAAA,QAAmB8B,SAAS,EACtDH,UAAW3C,EAAgB3B,SAC5B,cAGDD,EAAAA,EAAAA,KAAA,UACEsE,KAAK,SACLlE,QAAS,kBAAM2D,EAAWnB,EAAAA,QAAmB+B,KAAK,EAClDJ,UAAW3C,EAAgB3B,SAC5B,gBAIFe,IAAoBhB,EAAAA,EAAAA,KAAA,OAAAC,SAAK,wBACxB2B,IAAmB5B,EAAAA,EAAAA,KAAA,OAAAC,SAAK,6BAC1BD,EAAAA,EAAAA,KAAC4E,EAAAA,EAAW,CAACjF,SAAS,WACtBK,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CAAClF,SAAS,WACrBK,EAAAA,EAAAA,KAACO,EAAO,CAACG,IAAKoB,MAGpB,C","sources":["webpack://iotum-samples/./src/navigation/MenuButton/MenuButton.module.css?3f77","navigation/MenuButton/MenuButton.js","webpack://iotum-samples/./src/pages/tabbed-dashboard/submitForm.module.css?8a8c","pages/tabbed-dashboard/App.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"menuButton\":\"MenuButton_menuButton__e9oFw\",\"left\":\"MenuButton_left__d8Tih\",\"right\":\"MenuButton_right__fbjxn\"};","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styles from './MenuButton.module.css'; \r\n\r\nfunction MenuButton({ position = 'left' }) { // 'left' is default if no position is provided\r\n  const navigate = useNavigate();\r\n  \r\n  const handleClick = () => {\r\n    console.log('Menu Button Clicked, Go To the Menu Page.');\r\n    navigate('/iotum-samples/menu');\r\n  };\r\n\r\n  // Determine the button position class\r\n  const positionClass = position === 'right' ? styles.right : styles.left;\r\n\r\n  return (\r\n    <div>\r\n      <button className={`${styles.menuButton} ${positionClass}`} onClick={handleClick}>\r\n        Menu Page\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MenuButton;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"appContainer\":\"submitForm_appContainer__B1dgt\",\"verticalTabContainer\":\"submitForm_verticalTabContainer__riwi2\",\"widgetContainer\":\"submitForm_widgetContainer__Vm7kt\",\"badge\":\"submitForm_badge__llHLA\"};","import React, { useState, useRef, useCallback, useEffect, forwardRef } from 'react';\nimport styles from './submitForm.module.css';\nimport TokenButton from '../../navigation/TokenButton/TokenButton';\nimport MenuButton from '../../navigation/MenuButton/MenuButton';\nimport * as Callbridge from '@iotum/callbridge-js';\nimport { useSelector } from 'react-redux';\nimport useGuardedRoute from '../../components/hooks/useGuardedRoute';\n\nconst Widgets = forwardRef((props, ref) =>\n  <div ref={ref} className={styles.widgetContainer}></div>\n);\n\nconst App = () => {\n  useGuardedRoute(); // Guard the route\n  const [isYourAppVisible, setIsYourAppVisible] = useState(true);\n  const [unreadMessages, setUnreadMessages] = useState(0);\n  const [isWidgetInitialized, setWidgetInitialized] = useState(false);\n  const [chatWidgetReady, setChatWidgetReady] = useState(false);\n\n  /** @type {React.MutableRefObject<HTMLDivElement>} */\n  const containerRef = useRef();\n  /** @type {React.MutableRefObject<Callbridge.Dashboard>} */\n  const chatWidgetRef = useRef();\n  /** @type {React.MutableRefObject<Callbridge.Dashboard>} */\n  const widgetRef = useRef();\n\n  const credentials = useSelector(state => state.credentials);\n\n  const renderWidget = useCallback((container, { domain, token, hostId }) => {\n    console.log('Widget loading');\n\n    widgetRef.current = new Callbridge.Dashboard({\n      domain,\n      sso: {\n        token,\n        hostId,\n      },\n      container,\n    });\n\n    widgetRef.current.toggle(false);\n\n    widgetRef.current.on('dashboard.READY', () => {\n      chatWidgetRef.current = new Callbridge.Dashboard({\n        domain,\n        container,\n      }, Callbridge.Service.Team);\n\n      chatWidgetRef.current.toggle(false);\n\n      chatWidgetRef.current.on('dashboard.UNREAD_MESSAGES', (data) => {\n        const totalUnread = Object.values(data.rooms).reduce((total, count) => total + count, 0);\n        setUnreadMessages(totalUnread);\n      });\n\n      chatWidgetRef.current.on('dashboard.READY', () => {\n        setChatWidgetReady(true);\n        setWidgetInitialized(true);\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    // Check if all necessary credentials are available\n    const areCredentialsValid = credentials.token && credentials.domain && credentials.hostId;\n    if (areCredentialsValid && containerRef.current) {\n      renderWidget(containerRef.current, credentials);\n\n      return () => {\n        widgetRef.current?.unload();\n        chatWidgetRef.current?.unload();\n        console.log('Widget unloaded');\n      };\n    }\n  }, [credentials, renderWidget]);\n\n  useEffect(() => {\n    if (isWidgetInitialized) {\n      chatWidgetRef.current.on('dashboard.NAVIGATE', (data) => {\n        const room = data.pathname !== '/' ? data.pathname : \"an unspecified room\";\n        console.log(`The chat widget navigated to this room: ${room}`);\n      });\n    }\n  }, [isWidgetInitialized]);\n\n  /**\n   * @param {Callbridge.Service} service\n   */\n  const loadWidget = (service) => {\n    widgetRef.current?.toggle(false);\n    chatWidgetRef.current?.toggle(false);\n\n    if (service === Callbridge.Service.None) {\n      setIsYourAppVisible(true);\n      console.log(\"Load your app\");\n    } else if (service === Callbridge.Service.Team) {\n      chatWidgetRef.current.toggle(true);\n      setIsYourAppVisible(false);\n      console.log(\"Load the team chat widget\");\n    } else {\n      widgetRef.current.toggle(true);\n      widgetRef.current.load(service);\n      setIsYourAppVisible(false);\n      console.log(`Load the ${service} widget`);\n    }\n  }\n\n  return (\n    <div className={styles.appContainer}>\n      <div className={styles.verticalTabContainer}>\n        <button type=\"button\"\n          onClick={() => loadWidget(Callbridge.Service.None)}\n          disabled={!chatWidgetReady}\n        >\n          Your App\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => loadWidget('Team')}\n          disabled={!chatWidgetReady}\n          style={{ position: 'relative' }}\n        >\n          Team Chat\n          {unreadMessages > 0 && <span className={styles.badge}>{unreadMessages}</span>}\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => loadWidget(Callbridge.Service.Drive)}\n          disabled={!chatWidgetReady}\n        >\n          Drive\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => loadWidget(Callbridge.Service.Contacts)}\n          disabled={!chatWidgetReady}\n        >\n          Contacts\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => loadWidget(Callbridge.Service.Meet)}\n          disabled={!chatWidgetReady}\n        >\n          Meetings\n        </button>\n      </div>\n      {isYourAppVisible && <div>Your app goes here</div>}\n      {!chatWidgetReady && <div>The widgets are loading</div>}\n      <TokenButton position='right' />\n      <MenuButton position=\"right\" />\n      <Widgets ref={containerRef} />\n    </div>\n  );\n}\n\nexport default App;\n"],"names":["_ref","_ref$position","position","navigate","useNavigate","positionClass","styles","_jsx","children","className","concat","onClick","console","log","Widgets","forwardRef","props","ref","useGuardedRoute","_useState","useState","_useState2","_slicedToArray","isYourAppVisible","setIsYourAppVisible","_useState3","_useState4","unreadMessages","setUnreadMessages","_useState5","_useState6","isWidgetInitialized","setWidgetInitialized","_useState7","_useState8","chatWidgetReady","setChatWidgetReady","containerRef","useRef","chatWidgetRef","widgetRef","credentials","useSelector","state","renderWidget","useCallback","container","domain","token","hostId","current","Callbridge","sso","toggle","on","Team","data","totalUnread","Object","values","rooms","reduce","total","count","useEffect","_widgetRef$current","_chatWidgetRef$curren","unload","room","pathname","loadWidget","service","_widgetRef$current2","_chatWidgetRef$curren2","None","load","_jsxs","type","disabled","style","Drive","Contacts","Meet","TokenButton","MenuButton"],"sourceRoot":""}