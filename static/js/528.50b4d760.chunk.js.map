{"version":3,"file":"static/js/528.50b4d760.chunk.js","mappings":"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","sources":["components/ChatRoom/ChatRoom.js","webpack://iotum-samples/./src/navigation/MenuButton/MenuButton.module.css?3f77","navigation/MenuButton/MenuButton.js","pages/chat-room-list/ChatRoomList.js","webpack://iotum-samples/./src/pages/chat-room-list/submitForm.module.css?5027","pages/chat-room-list/App.js","webpack://iotum-samples/./src/components/ChatRoom/chat.module.css?03db"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as Callbridge from '@iotum/callbridge-js';\nimport styles from './chat.module.css';\n\nconst ChatRoom = (props) => {\n  const chatContainerRef = useRef(null); \n\n  useEffect(() => {\n    // This code will run after the component has rendered and the chat container is available in the DOM\n    const chatRoom = new Callbridge.Dashboard(\n      {\n        domain: 'iotum.callbridge.rocks',\n        container: chatContainerRef.current, // Use the DOM element reference\n      },\n      'Team',\n      { layout: 'main', pathname: props.path }\n    );\n\n    console.log(\"A new chat room was opened: \" + props.path);\n\n    // Cleanup function to be called when the component unmounts\n    return () => {\n      chatRoom.unload(); // Replace with actual cleanup method if available\n      console.log(\"Chat room was closed: \" + props.path);\n    };\n  }, [props.path]); \n\n  // Render the chat container reference\n  return <div ref={chatContainerRef} className={styles.chatRoom}></div>;\n};\n\nexport default ChatRoom;\n","// extracted by mini-css-extract-plugin\nexport default {\"menuButton\":\"MenuButton_menuButton__e9oFw\",\"left\":\"MenuButton_left__d8Tih\",\"right\":\"MenuButton_right__fbjxn\"};","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styles from './MenuButton.module.css'; \r\n\r\nfunction MenuButton({ position = 'left' }) { // 'left' is default if no position is provided\r\n  const navigate = useNavigate();\r\n  \r\n  const handleClick = () => {\r\n    console.log('Menu Button Clicked, Go To the Menu Page.');\r\n    navigate('/menu');\r\n  };\r\n\r\n  // Determine the button position class\r\n  const positionClass = position === 'right' ? styles.right : styles.left;\r\n\r\n  return (\r\n    <div>\r\n      <button className={`${styles.menuButton} ${positionClass}`} onClick={handleClick}>\r\n        Menu Page\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MenuButton;\r\n","import React from 'react';\nimport ChatRoom from '../../components/ChatRoom/ChatRoom.js';\nimport styles from '../../components/ChatRoom/chat.module.css';\nimport TokenButton from '../../navigation/TokenButton/TokenButton';\nimport MenuButton from '../../navigation/MenuButton/MenuButton';\n\nconst ChatRoomList = ({ rooms, onRoomClose }) => {\n  return (\n      <div className={styles.chatRoomsContainer}>\n        {rooms.map((room) =>\n          room.bool && (\n            <div key={room.path} className={`${styles.chatRoom} ${styles.activeRoom}`}>\n              <ChatRoom path={room.path} />\n              <button\n                className={styles.closeButton}\n                onClick={() => onRoomClose(room.path)}\n              >\n                x\n              </button>\n            </div>\n          )\n        )}\n        <TokenButton position='right'/>\n        <MenuButton position=\"right\"/>\n      </div>\n  );\n};\n\nexport default ChatRoomList;","// extracted by mini-css-extract-plugin\nexport default {\"form-wrapper\":\"submitForm_form-wrapper__Zc6Zy\",\"container\":\"submitForm_container__iv0mm\",\"roomListContainer\":\"submitForm_roomListContainer__8I4zt\"};","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport ChatRoomList from './ChatRoomList';\nimport styles from './submitForm.module.css';\nimport * as Callbridge from '@iotum/callbridge-js';\n\nexport const App = () => {\n  const [allRooms, setAllRooms] = useState([]);\n  const widget = useRef(null);\n  \n  // Retrive credentials from Redux store\n  const credentials = useSelector(state => state.credentials);\n  console.log(\"Credentials:\", credentials);\n\n  const handleRoomButtonClick = (path) => {\n    setAllRooms(prevRooms => prevRooms.map(room => {\n      return room.path === path ? { ...room, bool: true } : room;\n    }));\n  };\n\n  const handleRoomClose = (path) => {\n    console.log(path + \" was closed\");\n    setAllRooms(prevRooms => prevRooms.map(room => {\n      return room.path === path ? { ...room, bool: false } : room;\n    }));\n  };\n\n  const renderWidget = useCallback(() => {\n    console.log(\"renderWidget ran\");\n    widget.current = new Callbridge.Dashboard(\n      {\n        domain: credentials.domain, // using the state variable for domain\n        sso: {\n          token: credentials.token,\n          hostId: credentials.hostId\n        },\n        container: '#chat',\n      },\n      'Team',\n      { layout: 'list', pathname: '/'}\n    );\n    console.log(\"dashboard rendered\");\n\n    widget.current.once('dashboard.ROOM_LIST', (data) => {\n      const uniqueAccountNames = []; // To keep track of account names that should have \"(you)\" added\n      const allRoomsChange = Object.values(data.rooms).map((room) => {\n        const accounts = room.accounts.map((account) => account.name);\n    \n        // Check if the room has only one account\n        if (accounts.length === 1) {\n          const accountName = `${accounts[0]} (you)`;\n          uniqueAccountNames.push(accounts[0]); // Add the account name to the unique list\n          return {\n            name: accountName,\n            path: room.path,\n            bool: false,\n          };\n        }\n    \n        // Filter out account names that are in the unique list\n        const filteredNames = accounts.filter((name) => !uniqueAccountNames.includes(name));\n        return {\n          name: filteredNames.join(', '),\n          path: room.path,\n          bool: false,\n        };\n      });\n    \n      setAllRooms(allRoomsChange);\n    });\n\n    widget.current.on('dashboard.NAVIGATE', (data) => {\n      if (data.pathname !== \"/\") {\n        widget.current.load(\"Team\", {layout: \"list\"})\n        console.log(\"There was a navigate event to \" + data.pathname + \" in the list widget and the list widget was reloaded\");\n      } \n\n      handleRoomButtonClick(data.pathname);\n      }\n    )\n\n    widget.current.on('dashboard.READY', () => {\n      console.log(\"The list widget was rendered\");\n    });\n  }, [credentials]);\n\n  useEffect(() => {\n    if (credentials && credentials.token && credentials.domain && credentials.hostId) {\n      renderWidget(credentials);\n    }\n\n    return () => {\n      widget.current?.unload();\n    }\n  }, [credentials, renderWidget]);\n \n  return (\n    <div className={styles.container}>\n      <div id=\"chat\" className={styles.roomListContainer}></div>\n      <div>\n        <ChatRoomList rooms={allRooms} onRoomClose={handleRoomClose} />\n      </div>\n    </div>\n  );\n  \n};\n\nexport default App;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"chat_container__tPqzb\",\"roomListContainer\":\"chat_roomListContainer__hpRp3\",\"chatRoomItem\":\"chat_chatRoomItem__tdDrk\",\"active\":\"chat_active__YaH2-\",\"chatRoomsContainer\":\"chat_chatRoomsContainer__Smrg+\",\"chatRoom\":\"chat_chatRoom__Oon7U\",\"activeRoom\":\"chat_activeRoom__fmDik\",\"closeButton\":\"chat_closeButton__v7qtp\"};"],"names":["props","chatContainerRef","useRef","useEffect","chatRoom","Callbridge","domain","container","current","layout","pathname","path","console","log","unload","_jsx","ref","className","styles","_ref","_ref$position","position","navigate","useNavigate","positionClass","children","concat","onClick","rooms","onRoomClose","_jsxs","chatRoomsContainer","map","room","bool","activeRoom","ChatRoom","closeButton","TokenButton","MenuButton","App","_useState","useState","_useState2","_slicedToArray","allRooms","setAllRooms","widget","credentials","useSelector","state","renderWidget","useCallback","sso","token","hostId","once","data","uniqueAccountNames","allRoomsChange","Object","values","accounts","account","name","length","accountName","push","filter","includes","join","on","load","prevRooms","_objectSpread","_widget$current","id","ChatRoomList"],"sourceRoot":""}