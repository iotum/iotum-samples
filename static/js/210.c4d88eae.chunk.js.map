{"version":3,"file":"static/js/210.c4d88eae.chunk.js","mappings":"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","sources":["components/ChatRoom/ChatRoom.js","webpack://iotum-samples/./src/navigation/MenuButton/MenuButton.module.css?3f77","navigation/MenuButton/MenuButton.js","pages/list-widget-ui/ChatRoomList.js","pages/list-widget-ui/App.js","webpack://iotum-samples/./src/components/ChatRoom/chat.module.css?03db"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport * as Callbridge from '@iotum/callbridge-js';\nimport styles from './chat.module.css';\n\nconst ChatRoom = (props) => {\n  const chatContainerRef = useRef(null);\n  const credentials = useSelector(state => state.credentials)\n\n  useEffect(() => {\n    // Use the domain from the Redux store, or a default value if not available\n    const domain = credentials.domain || 'iotum.callbridge.rocks'\n\n    // This code will run after the component has rendered and the chat container is available in the DOM\n    const chatRoom = new Callbridge.Dashboard(\n      {\n        domain: domain,\n        container: chatContainerRef.current, // Use the DOM element reference\n      },\n      Callbridge.Service.Team,\n      {\n        layout: Callbridge.LayoutOption.main,\n        pathname: props.path\n      }\n    );\n\n    console.log(\"A new chat room was opened: \" + props.path);\n\n    // Cleanup function to be called when the component unmounts\n    return () => {\n      chatRoom.unload(); // Replace with actual cleanup method if available\n      console.log(\"Chat room was closed: \" + props.path);\n    };\n  }, [props.path, credentials]);\n\n  // Render the chat container reference\n  return <div ref={chatContainerRef} className={styles.chatRoom}></div>;\n};\n\nexport default ChatRoom;\n","// extracted by mini-css-extract-plugin\nexport default {\"menuButton\":\"MenuButton_menuButton__e9oFw\",\"left\":\"MenuButton_left__d8Tih\",\"right\":\"MenuButton_right__fbjxn\"};","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styles from './MenuButton.module.css'; \r\n\r\nfunction MenuButton({ position = 'left' }) { // 'left' is default if no position is provided\r\n  const navigate = useNavigate();\r\n  \r\n  const handleClick = () => {\r\n    console.log('Menu Button Clicked, Go To the Menu Page.');\r\n    navigate('/iotum-samples/menu');\r\n  };\r\n\r\n  // Determine the button position class\r\n  const positionClass = position === 'right' ? styles.right : styles.left;\r\n\r\n  return (\r\n    <div>\r\n      <button className={`${styles.menuButton} ${positionClass}`} onClick={handleClick}>\r\n        Menu Page\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MenuButton;\r\n","import React from 'react';\nimport ChatRoom from '../../components/ChatRoom/ChatRoom.js';\nimport styles from '../../components/ChatRoom/chat.module.css';\nimport TokenButton from '../../navigation/TokenButton/TokenButton';\nimport MenuButton from '../../navigation/MenuButton/MenuButton';\n\nconst ChatRoomList = ({ rooms, onRoomButtonClick, onRoomClose }) => {\n  return (\n    <div className={styles.container}>\n      <div className={styles.roomListContainer}>\n        {rooms.map((room) => (\n          <div key={room.path} className={styles.chatRoomItem}>\n            <button\n              onClick={() => onRoomButtonClick(room.path)}\n              className={room.bool ? styles.active : ''}\n            >\n              {room.name}\n            </button>\n          </div>\n        ))}\n      </div>\n      <div className={styles.chatRoomsContainer}>\n        {rooms.map((room) =>\n          room.bool && (\n            <div key={room.path} className={`${styles.chatRoom} ${styles.activeRoom}`}>\n              <ChatRoom path={room.path} />\n              <button\n                className={styles.closeButton}\n                onClick={() => onRoomClose(room.path)}\n              >\n                x\n              </button>\n            </div>\n          )\n        )}\n        <TokenButton position='right'/>\n        <MenuButton position=\"right\"/>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatRoomList;","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport ChatRoomList from './ChatRoomList';\nimport * as Callbridge from '@iotum/callbridge-js';\nimport useGuardedRoute from '../../components/hooks/useGuardedRoute';\n\nconst App = () => {\n  useGuardedRoute()\n  const [allRooms, setAllRooms] = useState([]);\n\n  // Retrieve credentials from Redux store\n  const credentials = useSelector(state => state.credentials);\n\n  const toggleRoom = (path, open) => {\n    setAllRooms(prevRooms => prevRooms.map(room => {\n      return room.path === path ? { ...room, bool: open } : room;\n    }));\n  };\n\n  const renderWidget = ({ domain, token, hostId }) => {\n    const _widget = new Callbridge.Dashboard(\n      {\n        domain,\n        sso: {\n          token,\n          hostId\n        },\n        container: '#chat',\n      },\n      Callbridge.Service.Team,\n      {\n        layout: Callbridge.LayoutOption.list,\n        pathname: '/'\n      }\n    );\n\n    _widget.once('dashboard.ROOM_LIST', (data) => {\n      const uniqueAccountNames = [];\n      const allRoomsChange = Object.values(data.rooms).map((room) => {\n        const accounts = room.accounts.map((account) => account.name);\n\n        if (accounts.length === 1) {\n          const accountName = `${accounts[0]} (you)`;\n          uniqueAccountNames.push(accounts[0]);\n          return {\n            name: accountName,\n            path: room.path,\n            bool: false,\n          };\n        }\n\n        const filteredNames = accounts.filter((name) => !uniqueAccountNames.includes(name));\n        return {\n          name: filteredNames.join(', '),\n          path: room.path,\n          bool: false,\n        };\n      });\n\n      setAllRooms(allRoomsChange);\n\n      document.querySelector('#loading')?.remove();\n    });\n\n    return _widget;\n  };\n\n  useEffect(() => {\n    if (credentials && credentials.token && credentials.domain && credentials.hostId) {\n      const widget = renderWidget(credentials);\n\n      // NOTE: for whatever reason, calling toggle directly causes StrictMode to unmount the widget container.\n      setTimeout(() => widget.toggle(false));\n\n      return () => {\n        widget.unload();\n      };\n    }\n  }, [credentials]); // useEffect dependencies\n\n  return (\n    <div>\n      <div id=\"room-buttons\">\n        <ChatRoomList\n          rooms={allRooms}\n          onRoomButtonClick={(path) => toggleRoom(path, true)}\n          onRoomClose={(path) => toggleRoom(path, false)}\n        />\n      </div>\n      <div id=\"chat\"><div id=\"loading\">Loading...</div></div>\n    </div>\n  );\n};\n\nexport default App;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"chat_container__tPqzb\",\"roomListContainer\":\"chat_roomListContainer__hpRp3\",\"chatRoomItem\":\"chat_chatRoomItem__tdDrk\",\"active\":\"chat_active__YaH2-\",\"chatRoomsContainer\":\"chat_chatRoomsContainer__Smrg+\",\"chatRoom\":\"chat_chatRoom__Oon7U\",\"activeRoom\":\"chat_activeRoom__fmDik\",\"closeButton\":\"chat_closeButton__v7qtp\"};"],"names":["props","chatContainerRef","useRef","credentials","useSelector","state","useEffect","domain","chatRoom","Callbridge","container","current","Team","layout","main","pathname","path","console","log","unload","_jsx","ref","className","styles","_ref","_ref$position","position","navigate","useNavigate","positionClass","children","concat","onClick","rooms","onRoomButtonClick","onRoomClose","_jsxs","roomListContainer","map","room","chatRoomItem","bool","active","name","chatRoomsContainer","activeRoom","ChatRoom","closeButton","TokenButton","MenuButton","useGuardedRoute","_useState","useState","_useState2","_slicedToArray","allRooms","setAllRooms","toggleRoom","open","prevRooms","_objectSpread","token","hostId","widget","_widget","sso","list","once","data","_document$querySelect","uniqueAccountNames","allRoomsChange","Object","values","accounts","account","length","accountName","push","filter","includes","join","document","querySelector","remove","renderWidget","setTimeout","toggle","id","ChatRoomList"],"sourceRoot":""}